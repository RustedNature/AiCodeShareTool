// === Start File: Core/IExporter.cs ===


using System.Text; // Added using directive for StringBuilder

namespace AiCodeShareTool.Core
{
    /// <summary>
    /// Defines the contract for exporting project files.
    /// The implementation will use the currently active language profile.
    /// </summary>
    public interface IExporter
    {
        /// <summary>
        /// Exports files from a project directory to a specified output file,
        /// using the currently active language profile configuration.
        /// </summary>
        /// <param name="projectDirectory">The root directory of the project to export.</param>
        /// <param name="exportFilePath">The path to the file where the exported content will be saved.</param>
        void Export(string projectDirectory, string exportFilePath);

         /// <summary>
         /// Generates a list of files that would be included in an export based on the current settings.
         /// </summary>
         /// <param name="projectDirectory">The root directory of the project.</param>
         /// <returns>A list of relative file paths, or null if an error occurred.</returns>
         List<string>? PreviewExport(string projectDirectory);

         /// <summary>
         /// Exports the project content directly to a string builder.
         /// </summary>
         /// <param name="projectDirectory">The root directory of the project to export.</param>
         /// <param name="totalCharacters">Output parameter for the total characters exported (content only).</param>
         /// <returns>A StringBuilder containing the formatted export content, or null if a critical error occurred during setup or file searching.</returns>
         StringBuilder? ExportToStringBuilder(string projectDirectory, out long totalCharacters);
    }
}

// === End File: Core/IExporter.cs ===

// === Start File: Core/FileSystemExporter.cs ===


using System.Text;
using AiCodeShareTool.Configuration;

namespace AiCodeShareTool.Core
{
    /// <summary>
    /// Implements the export functionality using the local file system.
    /// Uses the active configuration profile provided by IConfigurationService.
    /// </summary>
    public class FileSystemExporter : IExporter
    {
        private readonly IUserInterface _ui;
        private readonly IConfigurationService _configService;

        public FileSystemExporter(IUserInterface ui, IConfigurationService configService)
        {
            _ui = ui ?? throw new ArgumentNullException(nameof(ui));
            _configService = configService ?? throw new ArgumentNullException(nameof(configService));
        }

        /// <summary>
        /// Finds files matching the active profile but does not write the export file.
        /// </summary>
        /// <param name="projectDirectory">The root directory of the project.</param>
        /// <returns>A list of relative file paths that would be exported, or null if an error occurs.</returns>
        public List<string>? PreviewExport(string projectDirectory)
        {
             _ui.ClearOutput(); // Clear previous messages
             LanguageProfile activeProfile;
             try { activeProfile = _configService.GetActiveProfile(); }
             catch (InvalidOperationException ex)
             {
                 _ui.DisplayError($"Cannot preview: No language profile is active. {ex.Message}");
                 return null;
             }

             _ui.DisplayMessage($"--- Starting Export Preview using '{activeProfile.Name}' profile ---");

             if (string.IsNullOrWhiteSpace(projectDirectory) || !Directory.Exists(projectDirectory))
             {
                 _ui.DisplayError($"Project directory '{projectDirectory ?? "<null>"}' not found or inaccessible.");
                 return null;
             }

             try
             {
                 var excludedFolders = GetExcludedFolders();
                 _ui.DisplayMessage($"Searching in '{projectDirectory}' for files matching profile patterns...");
                 _ui.DisplayMessage($"Excluding folders: {string.Join(", ", excludedFolders)}");

                 string[] foundFiles = FindAndFilterFiles(projectDirectory, activeProfile, excludedFolders);

                 if (foundFiles.Length == 0)
                 {
                     _ui.DisplayWarning($"No suitable files found matching profile patterns in '{projectDirectory}'.");
                     return new List<string>(); // Return empty list
                 }

                 _ui.DisplaySuccess($"Preview complete: Found {foundFiles.Length} file(s) that would be exported.");

                 // Return relative paths
                 string baseDirFullPath = Path.GetFullPath(projectDirectory);
                 return foundFiles
                     .Select(fullPath => Path.GetRelativePath(baseDirFullPath, fullPath))
                     .OrderBy(relativePath => relativePath)
                     .ToList();
             }
              catch (ArgumentException argEx)
              {
                    // Catch specific errors like different drives during relative path calculation
                    _ui.DisplayError($"Error processing paths during preview (e.g., files on different drives?): {argEx.Message}");
                    return null;
              }
             catch (Exception ex)
             {
                  _ui.DisplayError($"Unexpected error during preview: {ex.Message}");
                  return null;
             }
              finally
             {
                  _ui.DisplayMessage($"--- Preview Finished ---");
             }
        }


        public void Export(string projectDirectory, string exportFilePath)
        {
            _ui.ClearOutput(); // Clear previous messages in UI
            LanguageProfile activeProfile;
            try
            {
                activeProfile = _configService.GetActiveProfile();
            }
            catch (InvalidOperationException ex)
            {
                _ui.DisplayError($"Cannot export: No language profile is active. {ex.Message}");
                return;
            }

            _ui.DisplayMessage($"--- Starting Export using '{activeProfile.Name}' profile ---");

            if (!ValidateInputs(projectDirectory, exportFilePath)) return;

            long totalCharactersExported = 0;

            try
            {
                EnsureExportDirectoryExists(exportFilePath);

                var excludedFolders = GetExcludedFolders();
                LogExportParameters(activeProfile, excludedFolders);
                _ui.DisplayMessage($"\nSearching in '{projectDirectory}'...");

                var codeFiles = FindAndFilterFiles(projectDirectory, activeProfile, excludedFolders);

                if (codeFiles.Length == 0)
                {
                    _ui.DisplayWarning($"No suitable, non-blacklisted files found matching profile patterns in '{projectDirectory}'. Export aborted.");
                    return;
                }

                _ui.DisplayMessage($"Found {codeFiles.Length} file(s) after filtering. Exporting to '{exportFilePath}'...");

                totalCharactersExported = WriteExportFile(projectDirectory, exportFilePath, codeFiles);

                _ui.DisplaySuccess($"\nExport completed successfully to '{exportFilePath}'.");
                 _ui.DisplayMessage($"Total characters exported: {totalCharactersExported:N0}"); // Display character count
            }
            catch (UnauthorizedAccessException ex) { _ui.DisplayError($"Access denied during export. {ex.Message}"); }
            catch (IOException ex) { _ui.DisplayError($"I/O error during export setup/write. {ex.Message}"); }
            catch (Exception ex) { _ui.DisplayError($"Unexpected error during export. {ex.Message}"); }
            finally
            {
                 _ui.DisplayMessage($"--- Export Finished ---");
            }
        }

        // Implementation matches the interface signature (StringBuilder?)
        public StringBuilder? ExportToStringBuilder(string projectDirectory, out long totalCharacters)
        {
            totalCharacters = 0;
            _ui.ClearOutput();
            LanguageProfile activeProfile;
            try { activeProfile = _configService.GetActiveProfile(); }
            catch (InvalidOperationException ex)
            {
                _ui.DisplayError($"Cannot export: No language profile is active. {ex.Message}");
                return null; // Return null on setup error
            }

            _ui.DisplayMessage($"--- Starting Export to String using '{activeProfile.Name}' profile ---");

            if (string.IsNullOrWhiteSpace(projectDirectory) || !Directory.Exists(projectDirectory))
             {
                 _ui.DisplayError($"Project directory '{projectDirectory ?? "<null>"}' not found or inaccessible.");
                 return null; // Return null on setup error
             }

            try
            {
                var excludedFolders = GetExcludedFolders();
                 LogExportParameters(activeProfile, excludedFolders);
                _ui.DisplayMessage($"\nSearching in '{projectDirectory}'...");

                var codeFiles = FindAndFilterFiles(projectDirectory, activeProfile, excludedFolders);

                if (codeFiles.Length == 0)
                {
                    _ui.DisplayWarning($"No suitable, non-blacklisted files found matching profile patterns in '{projectDirectory}'. Export aborted.");
                     // Return empty builder, not null, as the operation technically succeeded but found nothing.
                     return new StringBuilder();
                }

                _ui.DisplayMessage($"Found {codeFiles.Length} file(s) after filtering. Building export string...");

                // BuildExportContent returns non-null StringBuilder but can throw OOM
                var sb = BuildExportContent(projectDirectory, codeFiles, out totalCharacters);

                _ui.DisplaySuccess($"\nExport string built successfully.");
                _ui.DisplayMessage($"Total characters exported: {totalCharacters:N0}");
                return sb; // Return the non-null StringBuilder

            }
             catch (UnauthorizedAccessException ex) { _ui.DisplayError($"Access denied during export string build. {ex.Message}"); return null; }
             catch (IOException ex) { _ui.DisplayError($"I/O error during export string build. {ex.Message}"); return null; } // Less likely here
             catch (OutOfMemoryException oomEx) { _ui.DisplayError($"Out of memory during export string build. {oomEx.Message}"); return null; } // Catch OOM specifically
            catch (Exception ex) { _ui.DisplayError($"Unexpected error during export string build. {ex.Message}"); return null; }
            finally
            {
                 _ui.DisplayMessage($"--- Export to String Finished ---");
            }
        }

         private void LogExportParameters(LanguageProfile activeProfile, string[] excludedFolders)
         {
             _ui.DisplayMessage($"Searching for files matching patterns: {string.Join(", ", activeProfile.SearchPatterns)}");
             _ui.DisplayMessage($"Excluding folders: {string.Join(", ", excludedFolders)}");
             _ui.DisplayMessage($"Excluding extensions: {string.Join(", ", activeProfile.BlacklistedExtensions)}");
             _ui.DisplayMessage($"Excluding filenames: {string.Join(", ", activeProfile.BlacklistedFileNames)}");
         }

        private string[] GetExcludedFolders() => new[] {
            ExportSettings.BinFolderName, ExportSettings.ObjFolderName,
            ExportSettings.VsFolderName, ExportSettings.GitFolderName,
            ExportSettings.NodeModulesFolderName
        }.Distinct(StringComparer.OrdinalIgnoreCase).ToArray();


        private bool ValidateInputs(string projectDirectory, string exportFilePath)
        {
             if (string.IsNullOrWhiteSpace(projectDirectory))
             {
                 _ui.DisplayError("Project directory path is missing.");
                 return false;
             }
            if (!Directory.Exists(projectDirectory))
            {
                _ui.DisplayError($"Project directory '{projectDirectory}' not found or inaccessible.");
                return false;
            }
            if (string.IsNullOrWhiteSpace(exportFilePath))
            {
                _ui.DisplayError("Export file path is missing.");
                return false;
            }
            // Check if export file path is valid (basic check)
            try
            {
                Path.GetFullPath(exportFilePath);
            }
            catch (Exception ex)
            {
                 _ui.DisplayError($"Export file path is invalid: {ex.Message}");
                return false;
            }

            return true;
        }

        private void EnsureExportDirectoryExists(string exportFilePath)
        {
            string? exportDir = Path.GetDirectoryName(exportFilePath);
            if (!string.IsNullOrEmpty(exportDir) && !Directory.Exists(exportDir))
            {
                try
                {
                    Directory.CreateDirectory(exportDir);
                    _ui.DisplayMessage($"Creating directory: {exportDir}");
                }
                catch (Exception ex)
                {
                    throw new IOException($"Error creating export directory '{exportDir}': {ex.Message}", ex);
                }
            }
        }

        private string[] FindAndFilterFiles(string projectDirectory, LanguageProfile profile, string[] globallyExcludedFolders)
        {
            List<string> allFiles = new List<string>();
            EnumerationOptions enumOptions = new EnumerationOptions()
            {
                IgnoreInaccessible = true,
                RecurseSubdirectories = true,
                 MatchType = MatchType.Simple,
                 AttributesToSkip = FileAttributes.Hidden | FileAttributes.System
            };

            // Use the profile's SearchPatternsHashSet for potentially faster lookups if needed,
            // but Directory.EnumerateFiles handles the patterns directly.
             foreach (string pattern in profile.SearchPatterns) // Use the ReadOnlyCollection for iteration
            {
                try
                {
                     if(pattern.Contains("..")) {
                         _ui.DisplayWarning($"Skipping potentially unsafe search pattern: '{pattern}'");
                         continue;
                     }
                    allFiles.AddRange(Directory.EnumerateFiles(projectDirectory, pattern, enumOptions));
                }
                 catch (ArgumentException argEx) { _ui.DisplayWarning($"Invalid search pattern '{pattern}'. Skipping. Error: {argEx.Message}"); }
                 catch (DirectoryNotFoundException) { /* Ignore specific error if a pattern targets a non-existent dir */ }
                catch (Exception ex) { _ui.DisplayWarning($"Error enumerating files for pattern '{pattern}': {ex.Message}"); }
            }

            string fullProjDirPath = Path.GetFullPath(projectDirectory);
             // Use TrimEndingDirectorySeparator before adding slash to handle root dirs correctly (e.g., C:\)
            string lowerProjDirWithSlash = Path.TrimEndingDirectorySeparator(fullProjDirPath).ToLowerInvariant() + Path.DirectorySeparatorChar;


            // Use the internal HashSets from the profile for efficient filtering
             var blacklistedExtSet = profile.BlacklistedExtensionsHashSet;
             var blacklistedNameSet = profile.BlacklistedFileNamesHashSet;


            return allFiles
                .AsParallel()
                 // Pass globallyExcludedFolders to the lambda
                .Where(f => IsFileValidForExport(f, lowerProjDirWithSlash, globallyExcludedFolders, blacklistedExtSet, blacklistedNameSet))
                .Distinct()
                .OrderBy(f => f)
                .ToArray();
        }

        private bool IsFileValidForExport(string filePath, string lowerProjDirWithSlash, string[] excludedFolderNames, HashSet<string> blacklistedExtSet, HashSet<string> blacklistedNameSet)
        {
            try
            {
                string fullFilePath = Path.GetFullPath(filePath);
                string lowerFullFilePath = fullFilePath.ToLowerInvariant();
                string fileName = Path.GetFileName(filePath);
                string fileExtension = Path.GetExtension(filePath) ?? ""; // Ensure non-null, HashSet handles leading dot

                // Must be within project dir check first
                if (!lowerFullFilePath.StartsWith(lowerProjDirWithSlash, StringComparison.OrdinalIgnoreCase))
                {
                     return false; // Not under the project root
                }


                // Check if path contains any excluded folder name as a whole component
                 // Get relative path AFTER ensuring it's under the root
                string relativePath = Path.GetRelativePath(lowerProjDirWithSlash, lowerFullFilePath);

                 // Handle edge case where relative path might be just the filename (if file is in root)
                 // or if GetDirectoryName returns null for a root path component.
                string? dirName = Path.GetDirectoryName(relativePath);
                string[] pathComponents = string.IsNullOrEmpty(dirName)
                                          ? Array.Empty<string>() // No directory components if in root or invalid
                                          : dirName.Split(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar);

                 // Check if any path component matches an excluded folder name
                 bool isInExcludedFolder = pathComponents.Any(component =>
                    !string.IsNullOrEmpty(component) && // Ensure component is not empty
                    excludedFolderNames.Contains(component, StringComparer.OrdinalIgnoreCase)
                 );


                if (isInExcludedFolder) return false;

                 // Use the pre-computed HashSets with OrdinalIgnoreCase comparer
                bool isBlacklisted = blacklistedNameSet.Contains(fileName) ||
                                     (!string.IsNullOrEmpty(fileExtension) && blacklistedExtSet.Contains(fileExtension)); // HashSet handles leading dot check internally now

                if (isBlacklisted) return false;

                 return true; // If not excluded or blacklisted, it's valid
            }
            catch (PathTooLongException) {
                _ui.DisplayWarning($"Path too long. Skipping file: '{filePath}'");
                 return false;
            }
            catch (ArgumentException argEx) {
                 // Path.GetRelativePath can throw if paths are on different drives etc.
                 _ui.DisplayWarning($"Could not determine relative path for '{filePath}'. Skipping. Error: {argEx.Message}");
                 return false;
            }
            catch (Exception ex)
            {
                _ui.DisplayWarning($"Could not process path '{filePath}'. Skipping. Error: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Writes the export file and returns the total number of characters written (content only).
        /// </summary>
        private long WriteExportFile(string projectDirectory, string exportFilePath, string[] codeFiles)
        {
            var utf8EncodingWithoutBom = new UTF8Encoding(false);
            long totalChars;

            using (StreamWriter writer = new StreamWriter(exportFilePath, false, utf8EncodingWithoutBom))
            {
                 // Use shared logic to build content
                 // BuildExportContent now returns non-null SB
                StringBuilder content = BuildExportContent(projectDirectory, codeFiles, out totalChars);
                writer.Write(content.ToString()); // Write the whole built string
            }
            return totalChars;
        }

         /// <summary>
         /// Builds the complete export content into a StringBuilder. Can throw OutOfMemoryException.
         /// </summary>
         /// <param name="projectDirectory">Base project directory.</param>
         /// <param name="codeFiles">Array of full file paths to include.</param>
         /// <param name="totalChars">Output parameter for total content characters.</param>
         /// <returns>A StringBuilder containing the formatted export data (always non-null, but might throw OOM).</returns>
         /// <exception cref="OutOfMemoryException">Thrown if reading a file exhausts available memory.</exception>
         private StringBuilder BuildExportContent(string projectDirectory, string[] codeFiles, out long totalChars)
         {
             totalChars = 0;
             StringBuilder sb = new StringBuilder();

             sb.AppendLine($"{ExportSettings.ExportRootMarkerPrefix} {projectDirectory}{ExportSettings.MarkerSuffix}");
             sb.AppendLine($"{ExportSettings.TimestampMarkerPrefix} {DateTime.Now:yyyy-MM-dd HH:mm:ss}{ExportSettings.MarkerSuffix}");
             sb.AppendLine(); // Blank line after headers

             foreach (string filePath in codeFiles)
             {
                 try
                 {
                     string relativePath = Path.GetRelativePath(projectDirectory, filePath);
                     string markerPath = relativePath.Replace(Path.DirectorySeparatorChar, '/');

                     sb.AppendLine($"{ExportSettings.StartFileMarkerPrefix} {markerPath}{ExportSettings.MarkerSuffix}");
                     sb.AppendLine(); // Blank line before content

                     string fileContent = File.ReadAllText(filePath, Encoding.UTF8); // This can throw OOM
                     string trimmedContent = fileContent.TrimEnd('\r', '\n');
                     sb.AppendLine(trimmedContent); // AppendLine handles line ending

                     totalChars += trimmedContent.Length; // Count characters of the actual content written

                     sb.AppendLine(); // Blank line before end marker
                     sb.AppendLine($"{ExportSettings.EndFileMarkerPrefix} {markerPath}{ExportSettings.MarkerSuffix}");
                     sb.AppendLine(); // Blank line after end marker
                     _ui.DisplayMessage($"  + Processed: {relativePath}"); // Provide feedback during build too
                 }
                 catch (IOException readEx) { _ui.DisplayWarning($"Could not read file '{filePath}'. Skipping. Error: {readEx.Message}"); }
                 // Allow OOM to propagate up from File.ReadAllText
                 catch (OutOfMemoryException oomEx) { _ui.DisplayError($"Out of memory reading file '{filePath}'. Skipping remaining files. {oomEx.Message}"); throw; }
                 catch (Exception fileEx) { _ui.DisplayWarning($"An unexpected error occurred processing file '{filePath}'. Skipping. Error: {fileEx.Message}"); }
             }
             return sb; // Return the builder, potentially empty, but never null unless OOM was thrown
         }
    }
}

// === End File: Core/FileSystemExporter.cs ===

// === Start File: README.md ===


# AiCodeShareTool

**Disclaimer:** This program was developed entirely by the Gemini 2.5 Pro language model from Google AI, based on a series of prompts defining requirements and requesting code generation and modifications.

A simple Windows Forms application to export the text-based files from a project directory into a single, structured text file (suitable for sharing with AI models) and to import such a file back into a directory structure.

## Features

*   **Export:**
    *   Select a project root directory.
    *   Select an output text file path.
    *   **Language Profiles:** Select a configuration profile (e.g., ".NET", "Python", "Generic Text") to control which files are included. Profiles are loaded from `language_profiles.json` next to the executable.
        *   Each profile defines specific file search patterns (e.g., `*.cs`, `*.py`).
        *   Each profile defines blacklisted file extensions and specific filenames to exclude.
    *   Recursively finds files based on the selected profile's patterns.
    *   Excludes common unwanted folders globally (`bin`, `obj`, `.vs`, `.git`, `node_modules`).
    *   **Preview:** Button to show a list of files that *will* be exported based on current settings *before* performing the full export.
    *   **Character Count:** Displays the total number of characters exported after a successful export (or copy).
    *   Writes all found file contents into the output file, delimited by standard markers indicating the relative path.
    *   **Copy to Clipboard:** Button to perform the export directly to the system clipboard instead of saving to a file.
*   **Import:**
    *   Select a target root directory (where the project structure should be recreated).
    *   Select the structured text file to import from (format is language-agnostic).
    *   **Backup Option:** Prompts the user before import if they want to create a `.zip` backup of the target directory first.
    *   Parses the file based on the start/end file markers.
    *   Recreates the directory structure under the target directory.
    *   Writes the content for each file found in the import file. Existing files are overwritten.
    *   Includes basic security checks to prevent writing outside the target directory.
*   **GUI:**
    *   Simple Windows Forms interface with Menu Bar.
    *   Uses standard file/folder browse dialogs.
    *   Dropdown to select the Language Profile for export.
    *   Displays status messages, warnings, and errors in a text area.
    *   **Clear Status:** Button to clear the status message area.
    *   **Persistence:** Remembers the last used project directory, export/import file paths, and selected language profile between sessions.
    *   **Drag and Drop:** Allows dragging folders onto the "Project Directory" field and text files onto the "Export File Path" and "Import File Path" fields.
    *   **Tooltips:** Hover text explaining the purpose of buttons and inputs.

## Building and Running

1.  Make sure you have a compatible .NET SDK installed (e.g., .NET 8, .NET 9) that supports Windows Forms (`-windows` TargetFramework).
2.  Open the solution (`.sln`) file in Visual Studio or use the .NET CLI.
3.  Build the solution (Build -> Build Solution in VS, or `dotnet build` in CLI).
4.  Run the application (Debug -> Start Debugging in VS, or run the executable from the `bin` folder, e.g., `bin/Debug/net9.0-windows/AiCodeShareTool.exe`).

## Usage

1.  **Project Directory:** Click "Browse..." or drag and drop a folder to select the root folder of the project you want to export from or import into.
2.  **Export File Path:** Click "Browse..." or drag and drop a `.txt` file to select the file where the exported code should be saved (used by "Export Project" button).
3.  **Import File Path:** Click "Browse..." or drag and drop a `.txt` file to select the file containing the code to be imported.
4.  **Language Profile:** Select the appropriate profile from the dropdown *before* exporting or previewing. This determines which files are included. Profiles are loaded from `language_profiles.json`. Use **File -> Reload Profiles** to load external changes.
5.  **Click "Preview Export":** (Optional) To see a list of files that will be included in the export based on the current Project Directory and selected Language Profile.
6.  **Click "Export Project":** To gather files from the Project Directory (using the selected Language Profile) and save them to the Export File Path. The character count will be shown in the status area upon completion.
7.  **Click "Copy to Clipboard":** To gather files from the Project Directory (using the selected Language Profile) and copy the resulting formatted text directly to the clipboard.
8.  **Click "Import Code":** To read the Import File Path and recreate the files/folders within the Project Directory. You will be asked if you want to create a backup first. **This operation WILL OVERWRITE existing files.** It ignores the selected language profile as the file format dictates the content.
9.  Observe the status messages in the text area below the buttons. Click "Clear" to clear the status area.
10. Use the **File** menu to Reload Profiles or Exit. Use the **Help** menu for basic application info.

## Configuration

*   **Language Profiles:** Edit the `language_profiles.json` file located in the same directory as the application's executable (`.exe`). You can:
    *   Modify existing profiles (change `Name`, `SearchPatterns`, `BlacklistedExtensions`, `BlacklistedFileNames`).
    *   Add new profiles by copying an existing structure and customizing it.
    *   Delete profiles by removing their JSON object from the list.
    *   Use **File -> Reload Profiles** in the application to load changes without restarting.
    *   *Note:* Ensure JSON syntax is correct after editing. Use a JSON validator if unsure.
*   **Global Exclusions:** Edit the list of excluded folders in `Core/FileSystemExporter.cs` (`GetExcludedFolders` method) if needed. Recompilation is required for changes here.
*   **File Format:** Marker constants are defined in `Configuration/ExportSettings.cs`.

## AI Interaction Format (System Instruction)

This tool is designed to facilitate code sharing with AI models. The AI used to generate this tool (Gemini 1.5 Pro) expects interactions using the following format when requesting code updates or generation:

```text
Output Only New/Edited Files: Your response MUST only contain files that are newly created or have been edited/modified according to the current request. Do NOT include files requested in previous interactions if they remain unchanged.

Encapsulation: All code for the new or edited files MUST be contained within one single markdown code block (e.g., ```csharp ... ``` or ```xml ... ``` as appropriate). Do NOT add any introductory or concluding text outside of this code block unless explicitly requested.

File Markers: Each individual file's content included in the output MUST be clearly delineated by specific start and end markers.

Start Marker Format: Before the content of each file, you MUST include a line exactly like this:


// === Start* File: {relativePath} ===

End Marker Format: After the content of each file, you MUST include a line exactly like this:


// === End* File: {relativePath} ===


Path Requirement: The `{relativePath}` placeholder in the markers MUST be the correct relative path of the file *from the project's base directory*, even if it's an existing file being modified.
    *   Use forward slashes (/) as directory separators.
    *   Examples: `MyClass.cs`, `Services/UserService.cs`, `Models/Order.cs`.

Content Placement: The complete and unmodified content of the new or edited file MUST be placed between its corresponding Start File and End File markers.

Spacing:
    *   Include exactly one blank line immediately after the Start File marker line (before the file content).
    *   Include exactly one blank line immediately before the End File marker line (after the file content).
    *   Include exactly one blank line immediately after the End File marker line (before the next Start File marker, or the end of the code block).

Omission of Unchanged Files: Files provided in previous responses that are not explicitly part of the changes requested in the current prompt MUST be omitted from the output block.

No Extra Text: Do not include any other text or comments between the files, other than the specified markers and blank lines.


Adhering to this format allows the AI to correctly process code changes and maintain project context across multiple interactions.

// === End File: README.md ===
